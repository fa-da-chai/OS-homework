# include <stdio.h>
# include <iostream>
# include <vector>
# include <fstream>
# include <windows.h>
# include <queue>

using namespace std ;

int gTimeSlice ;
int timer = 0 ;

struct Process {
  char pid ;
  int cpuBrust ;
  int arrivalTime ;
  int priority ;
  int finishTime ;
  int remainTime ;
};

void ReadFile( string &fileName, vector<Process> &processList, int &method, int &gTimeSlice ) ;
void WriteFile( string fileName, vector<Process> finishProcess, vector<char> runningRecord, int method ) ;
char IdFormat( int pid_int ) ;
bool IsSR( Process running, Process waiting ) ;
vector<Process> InsertionSort_arrival( vector<Process> processList ) ;
vector<Process> InsertionSort_pid( vector<Process> processList ) ;
vector<Process> InsertionSort_remain( vector<Process> processList ) ;

class Cpu {
  private :
    vector<char> runningRecord ;
    Process *runningProcess ;
  public :
    void ContextSwitch( queue<Process> &readyQueue, vector<Process> &finishProcess ) ;
    void ContextSwitch( vector<Process> &readyQueue, vector<Process> &finishProcess ) ;
    bool IsIdle() ;
    bool Processing() ;
    vector<char> GetRunningRecord() {
      return runningRecord ;
    } // GetRunningRecord()

    void Reset() {
      runningRecord.clear() ;
      runningProcess = NULL ;
    } // Reset()

    Process GetRunningProcessInfo() {
      Process temp ;
      temp.arrivalTime = runningProcess -> arrivalTime ;
      temp.cpuBrust = runningProcess -> cpuBrust ;
      temp.finishTime = runningProcess -> finishTime ;
      temp.pid = runningProcess -> pid ;
      temp.priority = runningProcess -> priority ;
      temp.remainTime = runningProcess -> remainTime ;
      return temp ;
    } // GetRunningProcessRemain()
} ;

Cpu cpu ;

vector<Process> FCFS( vector<Process> processList ) ;
vector<Process> RR( vector<Process> processList ) ;
vector<Process> SRTF( vector<Process> processList ) ;
vector<Process> PPRR( vector<Process> processList ) ;
vector<Process> HRRN( vector<Process> processList ) ;

int main() {
  vector<Process> processList ;
  vector<Process> finishProcess ;
  int method ;
  string fileName ;

  ReadFile( fileName, processList, method, gTimeSlice ) ;
  processList = InsertionSort_arrival( processList ) ;
  if ( method == 1 )
    finishProcess = FCFS( processList ) ;
  else if ( method == 2 )
    finishProcess = RR( processList ) ;
  else if ( method == 3 )
    finishProcess = SRTF( processList ) ;
  /*else if ( method == 4 )
    finishProcess = PPRR( processList ) ;
  else if ( method == 5 )
    finishProcess = HRRN( processList ) ;*/

  finishProcess = InsertionSort_pid( finishProcess ) ;
  WriteFile( fileName, finishProcess, cpu.GetRunningRecord(), method ) ;
} // main() 

void ReadFile( string &fileName, vector<Process> &processList, int &method, int &gTimeSlice ) {
  FILE *infile ;
  char cStr[256] ;
  int fNo1, fNo2, fNo3, fNo4 ;
  Process process ;
  cout << "Please enter a file\n>" ;
  cin >> fileName ;
  fileName = fileName + ".txt" ; 
  infile = fopen( fileName.c_str(), "r" ) ;

  while( infile == NULL ) {
	cout << "\nError:Could not found the file\n" ;
    cout << "Please enter again\n>" ;
    cin >> fileName;
	fileName = fileName + ".txt" ; 
    infile = fopen( fileName.c_str(), "r" ) ;
  } //while 

  fscanf( infile, "%d %d", &method, &gTimeSlice ) ;
  for ( int i = 0 ; i < 6 ; i++ ) { // throw not using line
    fscanf( infile, "%s", cStr ) ;
  } // while

  while ( fscanf( infile, "%d %d %d %d", &fNo1, &fNo2, &fNo3, &fNo4 ) != EOF ) {
    process.pid = IdFormat( fNo1 ) ;
    process.cpuBrust = fNo2 ;
    process.arrivalTime = fNo3 ;
    process.priority = fNo4 ;
    process.finishTime = -1 ;
    process.remainTime = process.cpuBrust ;
    processList.push_back( process ) ;
  } // while

  fclose( infile ) ;
} // ReadFile()

void WriteFile( string fileName, vector<Process> finishProcess, vector<char> runningRecord, int method ) {
  FILE *infile ;
  string methodStr ;
  infile = fopen( ( "myout_" + fileName ).c_str(), "w" ) ;
  if ( method == 1 ) {
    methodStr = "FCFS" ;
    fprintf( infile, "FCFS\n" ) ;
  } // if

  else if ( method == 2 ) {
    methodStr = "RR" ;
    fprintf( infile, "RR\n" ) ;
  } // else if

  else if ( method == 3 ) {
    methodStr = "SRTF" ;
    fprintf( infile, "SRTF\n" ) ;
  } // else if

  else if ( method == 4 ) {
    methodStr = "PPRR" ;
    fprintf( infile, "PPRR\n" ) ;
  } // else if

  else if ( method == 5 ) {
    methodStr = "HRRN" ;
    fprintf( infile, "HRRN\n" ) ;
  } // else if

  else {
    fprintf( infile, "ALL\n" ) ;
  } // else

  fprintf( infile, "-" ) ;
  for ( int i = 0 ; i < runningRecord.size() ; i++ ) {
    fprintf( infile, "%c", runningRecord[i] ) ;
  } // for

  fprintf( infile, "\n===========================================================\n\n" ) ;
  fprintf( infile, "waiting\nID %s\n", methodStr.c_str() ) ;
  fprintf( infile, "===========================================================\n" ) ;
  for ( int i = 0 ; i < finishProcess.size() ; i++ ) {
    int waitingTime = finishProcess[i].finishTime - finishProcess[i].arrivalTime - finishProcess[i].cpuBrust ;
    int pid_int ;
    pid_int = finishProcess[i].pid - 'A' + 10 ;
    if ( pid_int < 10 )
      pid_int = finishProcess[i].pid - '0' ;

    fprintf( infile, "%d\t%d\n", pid_int, waitingTime ) ;
  } // for

  fprintf( infile, "===========================================================\n\n" ) ;

  fprintf( infile, "Turnaround Time\nID %s\n", methodStr.c_str() ) ;
  fprintf( infile, "===========================================================\n" ) ;
  for ( int i = 0 ; i < finishProcess.size() ; i++ ) {
    int turnaround = finishProcess[i].finishTime - finishProcess[i].arrivalTime ;
    int pid_int = finishProcess[i].pid - 'A' + 10 ;
    if ( pid_int < 10 )
      pid_int = finishProcess[i].pid - '0' ;

    fprintf( infile, "%d\t%d\n", pid_int, turnaround ) ;
  } // for

  fclose( infile ) ;
  cout << "Done\n" ;
} // WriteFile

char IdFormat( int pid_int ) {
  char pid_ch ;
  if ( pid_int < 10 ) {
    pid_ch = '0' + pid_int ;
  } // if

  else {
    pid_int -= 10 ;
    pid_ch = 'A' + pid_int ;
  } // else

  return pid_ch ;
} // IDFormat()

vector<Process> InsertionSort_arrival( vector<Process> processList ) {
  for ( int i = 1 ; i < processList.size() ; i++ ) {
    Process key = processList[i] ;
    int j = i - 1 ; 
    while( key.arrivalTime <= processList[j].arrivalTime && j >= 0 ) {
      if ( key.arrivalTime == processList[j].arrivalTime ) {
        if ( key.pid < processList[j].pid ) {
          processList[j+1] = processList[j] ;
        } // if

        else {
          break ;
        } // else
      } // if
      
      else {
        processList[j+1] = processList[j] ;
      } // 

      j-- ;
    } // while

    processList[j+1] = key ;
  } // for

  return processList ;
} // InsertionSort_arrival

vector<Process> InsertionSort_pid( vector<Process> processList ) {
  for ( int i = 1 ; i < processList.size() ; i++ ) {
    Process key = processList[i] ;
    int j = i - 1 ; 
    while( key.pid <= processList[j].pid && j >= 0 ) {
      processList[j+1] = processList[j] ;
      j-- ;
    } // while

    processList[j+1] = key ;
  } // for

  return processList ;
} // InsertionSort_pid()

vector<Process> InsertionSort_remain( vector<Process> processList ) {
  for ( int i = 1 ; i < processList.size() ; i++ ) {
    Process key = processList[i] ;
    int j = i - 1 ; 
    while( key.remainTime <= processList[j].remainTime && j >= 0 ) {
      if ( key.remainTime == processList[j].remainTime ) {
        if ( key.arrivalTime <= processList[j].arrivalTime ) {
          if ( key.arrivalTime == processList[j].arrivalTime ) {
            if ( key.pid < processList[j].pid ) {
              processList[j+1] = processList[j] ;
              j-- ;
            } // if

            else {
              break ; // not sure
            } // else
          } // if

          else { // arrivalTime:key<now
            processList[j+1] = processList[j] ;
            j-- ;
          } // else
        } // if

        else {
          break ;
        } // else
      } // if

      else {
        processList[j+1] = processList[j] ;
        j-- ;
      } // else
    } // while

    processList[j+1] = key ;
  } // for

  return processList ;
} // InsertionSort_remain()

bool IsSR( Process running, Process waiting ) {
  if ( running.remainTime <= waiting.remainTime ) {
    if ( running.remainTime == waiting.remainTime ) {
      if ( running.arrivalTime <= waiting.arrivalTime ) {
        if ( running.arrivalTime == waiting.arrivalTime ) {
          if ( running.pid < waiting.pid ) {
            return true ;
          } // if

          else
            return false ;
        } // if

        else {
          return true ;
        } // else
      } // if

      else {
        return false ;
      } // else
    } // if

    else {
      return true ;
    } // else
  } // if

  else
    return false ;
} // IsSR

vector<Process> FCFS( vector<Process> processList ) {
  int processIndex = 0 ;
  bool done = false ;
  queue<Process> readyQueue ;
  vector<Process> finishProcess ;

  while ( processList[processIndex].arrivalTime == timer ) {
    readyQueue.push( processList[processIndex] ) ;
    processIndex++ ;
  } // while

  if ( !readyQueue.empty() )
    cpu.ContextSwitch( readyQueue, finishProcess ) ;

  timer++ ;

  while ( processIndex < processList.size() || !cpu.IsIdle() ) {
    while ( processList[processIndex].arrivalTime == timer ) {
      readyQueue.push( processList[processIndex] ) ;
      processIndex++ ;
    } // while

    if ( !cpu.IsIdle() )
      done = !cpu.Processing() ;

    if ( done ) {
      cpu.ContextSwitch( readyQueue, finishProcess ) ;
      done = false ;
    } // if

    timer++ ;
  } // while

  return finishProcess ;
} // FCFS()

vector<Process> RR( vector<Process> processList ) {
  int processIndex = 0 ;
  int timeSliceCounter = 0 ;
  bool done = false ;
  queue<Process> readyQueue ;
  vector<Process> finishProcess ;

  while ( processList[processIndex].arrivalTime == timer ) {
    readyQueue.push( processList[processIndex] ) ;
    processIndex++ ;
  } // while

  if ( !readyQueue.empty() ) {
    cpu.ContextSwitch( readyQueue, finishProcess ) ;
    timeSliceCounter++ ;
  } // if

  timer++ ;

  while ( processIndex < processList.size() || !cpu.IsIdle() ) {
    while ( processList[processIndex].arrivalTime == timer ) {
      readyQueue.push( processList[processIndex] ) ;
      processIndex++ ;
    } // while

    if ( !cpu.IsIdle() )
      done = !cpu.Processing() ;
    if ( done || timeSliceCounter == gTimeSlice) {
      cpu.ContextSwitch( readyQueue, finishProcess ) ;
      done = false ;
      timeSliceCounter = 0 ;
    } // if

    timer++ ;
    timeSliceCounter++ ;
  } // while

  return finishProcess ;
} // RR()

vector<Process> SRTF( vector<Process> processList ) {
  int processIndex = 0 ;
  bool done = false ;
  vector<Process> readyQueue ;
  vector<Process> finishProcess ;

  while ( processList[processIndex].arrivalTime == timer ) {
    readyQueue.push_back( processList[processIndex] ) ;
    processIndex++ ;
  } // while

  readyQueue = InsertionSort_remain( readyQueue ) ;

  if ( !readyQueue.empty() ) {
    cpu.ContextSwitch( readyQueue, finishProcess ) ;
    readyQueue = InsertionSort_remain( readyQueue ) ;
  } // if

  timer++ ;

  while ( processIndex < processList.size() || !cpu.IsIdle() ) { // SRTF
    cout << timer << endl ;
    bool isSR = false ;
    while ( processList[processIndex].arrivalTime == timer ) {
      readyQueue.push_back( processList[processIndex] ) ;
      processIndex++ ;
    } // while

    if ( !cpu.IsIdle() )
      done = !cpu.Processing() ;

    readyQueue = InsertionSort_remain( readyQueue ) ;
    if ( !cpu.IsIdle() && !readyQueue.empty() )
      isSR = IsSR( cpu.GetRunningProcessInfo(), readyQueue[0] ) ;

    if ( done || !isSR ) {
      cpu.ContextSwitch( readyQueue, finishProcess ) ;
      done = false ;
      readyQueue = InsertionSort_remain( readyQueue ) ;
    } // if

    timer++ ;
  } // while

  return finishProcess ;
} // SRTF()

vector<Process> PPRR( vector<Process> processList ) {

} // PPRR()

vector<Process> HRRN( vector<Process> processList ) {

} // HRRN()

void Cpu :: ContextSwitch( queue<Process> &readyQueue, vector<Process> &finishProcess ) {
  if ( runningProcess == NULL ) {
    runningProcess = &readyQueue.front() ;
    readyQueue.pop() ;
  } // if

  else if ( runningProcess -> remainTime == 0 ) {
    runningProcess -> finishTime = timer ;
    finishProcess.push_back( *runningProcess ) ;
    if ( !readyQueue.empty() ) {
      runningProcess = &readyQueue.front() ;
      readyQueue.pop() ;
    } // if

    else {
      runningProcess = NULL ;
    } // else
  } // if

  else {
    if ( !readyQueue.empty() ) {
      readyQueue.push( *runningProcess ) ;
      runningProcess = &readyQueue.front() ;
      readyQueue.pop() ;
    } // if
  } // else
} // ContextSwitch()

void Cpu :: ContextSwitch( vector<Process> &readyQueue, vector<Process> &finishProcess ) {
  if ( runningProcess == NULL ) {
    swap( readyQueue[0], readyQueue[readyQueue.size()-1] ) ;
    runningProcess = &readyQueue[readyQueue.size()-1] ; 
    readyQueue.pop_back() ;
  } // if

  else if ( runningProcess -> remainTime == 0 ) {
    runningProcess -> finishTime = timer ;
    finishProcess.push_back( *runningProcess ) ;
    if ( !readyQueue.empty() ) {
      swap( readyQueue[0], readyQueue[readyQueue.size()-1] ) ;
      runningProcess = &readyQueue[readyQueue.size()-1] ; 
      readyQueue.pop_back() ;
    } // if

    else {
      runningProcess = NULL ;
    } // else
  } // if

  else {
    if ( !readyQueue.empty() ) {
      readyQueue.push_back( *runningProcess ) ;
      swap( readyQueue[0], readyQueue[readyQueue.size()-1] ) ;
      runningProcess = &readyQueue[readyQueue.size()-1] ; 
      readyQueue.pop_back() ;
    } // if
  } // else
} // ContextSwitch()

bool Cpu :: IsIdle() {
  if ( runningProcess == NULL )
    return true ;

  return false ;
} // ISIdle()

bool Cpu :: Processing() { 
  // ¥H1­Ó®É¶¡³æ¦ì¬°³æ¦ì 
  // return if a process is done
  // false if process is done, true if process still running
  if ( runningProcess == NULL ) 
    return false ;
  
  else {
    runningRecord.push_back( runningProcess -> pid ) ;
    ( runningProcess -> remainTime )-- ;
    if ( runningProcess -> remainTime == 0 ) 
      return false ;

    return true ;
  } // else
} // Processing()
