# include <stdio.h>
# include <iostream>
# include <vector>
# include <fstream>
# include <windows.h>
# include <queue>

using namespace std ;

int timeSlice ;

struct Process {
  string pid ;
  int cpuBrust ;
  int arrivalTime ;
  int priority ;
  int finishTime ;
};

void ReadFile( string &fileName, vector<Process> &processList, int &method, int &timeSlice ) ;
string IdFormat( int pid_int ) ;
vector<Process> InsertionSort( vector<Process> processList ) ;

class Cpu {
  private :
    vector<string> runningRecord ;
  public :
    Process running ;

    ContextSwitch( Process readyProcess ) ;
    
} ;

int main() {
  vector<Process> processList ;
  int method ;
  string fileName ;

  ReadFile( fileName, processList, method, timeSlice ) ;
  processList = InsertionSort( processList ) ;
  for ( int i = 0 ; i < processList.size() ; i++ ) {
    cout << processList[i].pid << "," ;
    cout << processList[i].cpuBrust << "," ;
    cout << processList[i].arrivalTime << "," ;
    cout << processList[i].priority << endl ;
  } // for
} // main() 

void ReadFile( string &fileName, vector<Process> &processList, int &method, int &timeSlice ) {
  FILE *infile ;
  char cStr[256] ;
  int fNo1, fNo2, fNo3, fNo4 ;
  Process process ;
  cout << "Please enter a file\n>" ;
  cin >> fileName ;
  fileName = fileName + ".txt" ; 
  infile = fopen( fileName.c_str(), "r" ) ;

  while( infile == NULL ) {
	cout << "\nError:Could not found the file\n" ;
    cout << "Please enter again\n>" ;
    cin >> fileName;
	fileName = fileName + ".txt" ; 
    infile = fopen( fileName.c_str(), "r" ) ;
  } //while 

  fscanf( infile, "%d %d", &method, &timeSlice ) ;
  cout << method << "," << timeSlice << endl ;
  for ( int i = 0 ; i < 6 ; i++ ) { // throw not using line
    fscanf( infile, "%s", cStr ) ;
  } // while

  int i  = 0 ;
  while ( fscanf( infile, "%d %d %d %d", &fNo1, &fNo2, &fNo3, &fNo4 ) != EOF ) {
    process.pid = IdFormat( fNo1 ) ;
    process.cpuBrust = fNo2 ;
    process.arrivalTime = fNo3 ;
    process.priority = fNo4 ;
    processList.push_back( process ) ;
  } // while

  fclose( infile ) ;
} // ReadFile()

string IdFormat( int pid_int ) {
  string pid_str ;
  if ( pid_int < 10 ) {
    pid_str = '0' + pid_int ;
  } // if

  else {
    pid_int -= 10 ;
    pid_str = 'A' + pid_int ;
  } // else

  return pid_str ;
} // IDFormat()

vector<Process> InsertionSort( vector<Process> processList ) {
  for ( int i = 1 ; i < processList.size() ; i++ ) {
    Process key = processList[i] ;
    int j = i - 1 ; 
    while( key.arrivalTime <= processList[j].arrivalTime && j >= 0 ) {
      if ( key.arrivalTime == processList[j].arrivalTime ) {
        if ( key.pid < processList[j].pid ) {
          processList[j+1] = processList[j] ;
        } // if

        else {
          break ;
        } // else
      } // if
      
      else {
        processList[j+1] = processList[j] ;
      } // 

      j-- ;
    } // while

    processList[j+1] = key ;
  } // for

  return processList ;
} // Sorting()



