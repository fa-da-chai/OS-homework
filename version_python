import threading
from multiprocessing import Pool
import queue
import time
from datetime import datetime, timezone, timedelta

def merge( leftsub, rightsub ) :
	leftSize = len(leftsub)
	rightSize = len(rightsub)
	arr = [0] * ( leftSize + rightSize )
	rightIndex = 0
	leftIndex = 0
	i = 0
	while i < len(arr) :
		if rightIndex >= rightSize :
			arr[i] = leftsub[leftIndex]
			leftIndex += 1
			
		elif leftIndex >= leftSize :
			arr[i] = rightsub[rightIndex]
			rightIndex += 1
			
		else :
			if leftsub[leftIndex] <= rightsub[rightIndex] :
				arr[i] = leftsub[leftIndex]
				leftIndex += 1
			else :
				arr[i] = rightsub[rightIndex]
				rightIndex += 1
				
		i += 1
				
	return arr
		
def BubbleSort(arr, useQueue):
	n = len(arr)
  
	# Traverse through all array elements
	for i in range(n-1):
	# range(n) also work but outer loop will repeat one time more than needed.
  
		# Last i elements are already in place
		for j in range(0, n-i-1):
  
			# traverse the array from 0 to n-i-1
			# Swap if the element found is greater
			# than the next element
			if arr[j] > arr[j+1] :
				arr[j], arr[j+1] = arr[j+1], arr[j]	
				
	global myQ 
	myQ.put( arr )

	return arr			

def bubbleSort(arr):
	n = len(arr)
  
	# Traverse through all array elements
	for i in range(n-1):
	# range(n) also work but outer loop will repeat one time more than needed.
  
		# Last i elements are already in place
		for j in range(0, n-i-1):
  
			# traverse the array from 0 to n-i-1
			# Swap if the element found is greater
			# than the next element
			if arr[j] > arr[j+1] :
				arr[j], arr[j+1] = arr[j+1], arr[j]	
				
	return arr			
	
def ReadFile( arr, fileName ) :
	infile = open( 'input/' + fileName + '.txt', 'r' )
	for num in infile :
		arr.append( int(num) )
								
	infile.close()
	
def OutputFile( arr, fileName, testNum, cpuTime ) :
	tz = timezone(timedelta(hours=+8))
	datetime.now(tz).isoformat()
	outfile = open( fileName + '_Output' + str(testNum) + '.txt', 'w' )
	print( 'Sort:', file = outfile )
	for num in arr :
		print( num, file = outfile )
		
	print( 'CPU Time : ', cpuTime , file = outfile )
	print( 'Output Time : ', datetime.now(tz).isoformat() , file = outfile )
	outfile.close()

# main

if __name__ == '__main__' :
	while True :
		myQ = queue.Queue()
		arr = []
		fileName = input( 'Please Enter Input File(q to quit):\n>' )
		if fileName == 'q' :
			break
		
		ReadFile( arr, fileName )
		k_files = int( input( '\n請輸入要切成幾份檔案\n>' ) )
		numsInFile = int( len( arr ) / k_files ) 
		
		# mission 1 start-----------------------------
		
		start = time.time()
		sorted = arr.copy()
		bubbleSort( sorted )
		end = time.time()
		OutputFile( sorted, fileName, 1, end -start )
		print( '\nDone mission 1' )
		
		# mission 2 start-----------------------------
		
		start = time.time()
		sorted.clear()
		threads = []
		i = 0
		accmulaIndex = 0
		nowIndex = 0
		while True : # bubble sort
			accmulaIndex += numsInFile
			if accmulaIndex >= len( arr ) :
				threads.append( threading.Thread(target = BubbleSort, args = ( arr[nowIndex:len( arr )], True ) ) )
				threads[i].start()
				break 
				
			threads.append( threading.Thread(target = BubbleSort, args = ( arr[nowIndex:accmulaIndex], True ) ) )
			threads[i].start()
			nowIndex = accmulaIndex
			i += 1
			
		for i in range(int(k_files)) : # bubble join
			threads[i].join()
			
		while not myQ.empty() : # two way merge
			sorted = merge( sorted, myQ.get() )
			
		end = time.time()
		OutputFile( sorted, fileName, 2, end -start )
		print( '\nDone mission 2' )
		
		# mission 3 start-----------------------------
		
		start = time.time()
		sorted.clear()
		tempArr = []
		i = 0
		accmulaIndex = 0
		nowIndex = 0  
		while True : # bubble sort
			accmulaIndex += numsInFile
			if accmulaIndex >= len( arr ) :
				tempArr.append( arr[nowIndex:len( arr )] )
				break 
				
			tempArr.append( arr[nowIndex:accmulaIndex] )		
			nowIndex = accmulaIndex
			i += 1
		
		pool = Pool( processes = int(k_files) )
		p_result = pool.map( bubbleSort, tempArr )
		pool.close()
		pool.join()
		
		for tempArr in p_result :
			sorted = merge( sorted, tempArr )
			
		end = time.time()
		OutputFile( sorted, fileName, 3,end -start )
		print( '\nDone mission 3' )
		
		# mission 4 start-----------------------------
		
		start = time.time()
		sorted.clear()
		accmulaIndex = 0
		nowIndex = 0
		temp = []
		while True : # bubble sort
			accmulaIndex += numsInFile
			if accmulaIndex >= len( arr ) :
				sorted = bubbleSort( arr[nowIndex:len( arr )] )
				break
			
			temp.append( bubbleSort( arr[nowIndex:accmulaIndex] ) )
			nowIndex = accmulaIndex
		
		nowIndex = 0 + numsInFile
		accmulaIndex = nowIndex
		for tempArr in temp :
			sorted = merge( sorted, tempArr )
		
		end = time.time()
		OutputFile( sorted, fileName, 4, end -start )
		print( '\nDone mission 4' )
	
		
		
		
		



		
			
