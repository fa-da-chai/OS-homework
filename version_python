def merge(arr, l, m, r):
    n1 = m - l + 1
    n2 = r- m
  
    # create temp arrays
    L = [0] * (n1)
    R = [0] * (n2)
  
    # Copy data to temp arrays L[] and R[]
    for i in range(0 , n1):
        L[i] = arr[l + i]
  
    for j in range(0 , n2):
        R[j] = arr[m + 1 + j]
  
    # Merge the temp arrays back into arr[l..r]
    i = 0     # Initial index of first subarray
    j = 0     # Initial index of second subarray
    k = l     # Initial index of merged subarray
  
    while i < n1 and j < n2 :
        if L[i] <= R[j]:
            arr[k] = L[i]
            i += 1
        else:
            arr[k] = R[j]
            j += 1
        k += 1
  
    # Copy the remaining elements of L[], if there
    # are any
    while i < n1:
        arr[k] = L[i]
        i += 1
        k += 1
  
    # Copy the remaining elements of R[], if there
    # are any
    while j < n2:
        arr[k] = R[j]
        j += 1
        k += 1
        
def bubbleSort(arr):
    n = len(arr)
  
    # Traverse through all array elements
    for i in range(n-1):
    # range(n) also work but outer loop will repeat one time more than needed.
  
        # Last i elements are already in place
        for j in range(0, n-i-1):
  
            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater
            # than the next element
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]            

def ReadFile( arr, fileName ) :
    infile = open( 'input/' + fileName + '.txt', 'r' )
    for num in infile :
        arr.append( int(num) )
								
    infile.close()
	

def OutputFile( arr, fileName, testNum ) :
	outfile = open( fileName + '_Output' + str(testNum) + '.txt', 'w' )
	for num in arr :
		print( num, file = outfile )
		
	#outfile.write(time)
	outfile.close()

# main
while True :
	arr = []
	fileName = input( 'Please Enter Input File(q to quit):\n>' )
	if fileName == 'q' :
		break
	
	ReadFile( arr, fileName )
	k_files = input( '\n請輸入要切成幾份檔案\n>' )
	numsInFile = int( len( arr ) / k_files )
	sorted = arr 
	
    # mission 1 start
	bubbleSort( sorted )
	OutputFile( sorted, fileName, 1 )
	print( '\nDone mission 1' )
	
	# mission 2 start
	# mission 3 start
	# mission 4 start
	accmulaIndex = 0
	nowIndex = 0
	while True : # bubble sort
		accmulaIndex += numsInFile
		if accmulaIndex >= len( arr ) :
			bubbleSort( sorted[nowIndex:len( arr )] )
			break
		
		bubbleSort( sorted[nowIndex:accmulaIndex] )
		nowIndex = accmulaIndex
	
	accmulaIndex = 0
	nowIndex = 0
	mid = 0
	while True :
		mid = nowIndex + numsInFile
		accmulaIndex += mid + numsInFile
		if accmulaIndex >= len( arr ) : 
			mid = len(arr) - nowIndex
			merge( sorted, nowIndex, nowIndex, mid, len(arr) )
	
	
	
	
	
	
