# include <stdio.h>
# include <stdlib.h>
# include <time.h>
# include <vector>
# include <fstream>
# include <iostream>
# include <thread>
# include <queue>
# include <windows.h>

using namespace std ;

typedef thread *threadPtr ;
queue< vector<int> > myQ ;

void ReadInput( vector<int> &arr, string &fileName ) ;
void WriteOutput( vector<int> arr, double  runTime, string fileName ) ;
vector<int> BubbleSort( vector<int> arr, bool isThread ) ;
vector< vector<int> > CutFiles( vector<int> originData, int k_files ) ;
vector<int> Merge( vector<int> leftSub, vector<int> rightSub, bool isThread ) ;

class Cleaner {
  public :
    static void clear( vector<int> &v ) {
      vector<int> empty ;
      empty.swap( v ) ;
    } // clear()

    static void clear( vector< vector<int> > &v ) {
      vector< vector<int> > empty ;
      empty.swap( v ) ;
    } // clear()

    static void clear( vector<threadPtr> &v ) {
      vector<threadPtr> empty ;
      empty.swap( v ) ;
    } // clear()

    static void clear( queue<vector<int>> &q ) {
      queue<vector<int>> empty ;
      empty.swap( q ) ;
    } // clear()
};

int main() {
  // Àx¦s®É¶¡¥ÎªºÅÜ¼Æ
  while ( true ) {
  time_t start, end;
  vector<int> origin, sorted ;
  vector< vector<int> > k_files ;
  int numOfFiles ;
  double runtime ;
  string fileName ;
  ReadInput( origin, fileName ) ; 
  cout << "½Ð¿é¤J­n¤Á¦¨´X¥÷¡G\n" ;
  cin >> numOfFiles ;

  /*// -----------------------------------------------------1 start
  // ¶}©l­pºâ®É¶¡
  // start = time(NULL);
  start = clock() ;
  sorted = BubbleSort( origin, false ) ;
  // µ²§ô­pºâ®É¶¡
  // end = time(NULL);
  end = clock() ;

  // ­pºâ¹ê»Úªá¶O®É¶¡
  runtime = end - start ; //difftime( end, start );
  WriteOutput( sorted, runtime, fileName + "_myOutput1" )  ;
  printf( "1.CPU runtime:%fms\n", runtime ) ;
  Cleaner.clear( sorted ) ;
  
  //-----------------------------------------------------1 end*/
  // ----------------------------------------------------2 start

  vector<threadPtr> threads ;
  threads.resize( numOfFiles ) ;
  k_files = CutFiles( origin, numOfFiles ) ;
  start = clock() ;
  
  for ( int i = 0 ; i < numOfFiles ; i++ ) { 
    threads[i] = new thread( BubbleSort, k_files[i], true ) ;
  } // for

  cout << "pass bubble\n" ;

  for ( int i = 0 ; i < numOfFiles ; i++ ) {
    threads[i] -> join() ;
    delete( threads[i] ) ;
  } // for

  Cleaner::clear( threads ) ;
  cout << "pass join\n" ;

  int tempOfNumOfFiles = numOfFiles ;
  while ( tempOfNumOfFiles != 1 ) { // threads merge
    int threadCount = 0 ;
    threads.resize( tempOfNumOfFiles/2 ) ;
    if ( tempOfNumOfFiles % 2 == 0 ) {
      cout << tempOfNumOfFiles << ":\n" ;
      for ( int i= 0 ; i < tempOfNumOfFiles ; i += 2 ) {
        vector<int> temp = myQ.front() ;
        myQ.pop() ;
        vector<int> temp2 = myQ.front() ;
        myQ.pop() ;
        cout << "pass" << i << ", " ;
        threads[threadCount] = new thread( Merge, temp, temp2, true ) ;
        threadCount++ ;
        Cleaner::clear( temp ) ;
        Cleaner::clear( temp2 ) ;
        cout << "pass" << i << endl ;
      } // for
    }  // if

    else {
      cout << tempOfNumOfFiles << ":\n" ;
      for ( int i= 0 ; i < tempOfNumOfFiles-1 ; i += 2 ) {
        vector<int> temp = myQ.front() ;
        myQ.pop() ;
        vector<int> temp2 = myQ.front() ;
        myQ.pop() ;
        cout << "pass" << i << ", " ;
        threads[threadCount] = new thread( Merge, temp, temp2, true ) ;
        threadCount++ ;
        Cleaner::clear( temp ) ;
        Cleaner::clear( temp2 ) ;
        cout << "pass" << i << endl ;
      } // for

      tempOfNumOfFiles++ ;
    } //  else

    for ( int i = 0 ; i < threadCount ; i++ ) {
      threads[i] -> join() ;
      delete( threads[i] ) ;
    } // for

    cout << "pass merge:" << tempOfNumOfFiles << endl ;
    Cleaner::clear( threads ) ;
    tempOfNumOfFiles = tempOfNumOfFiles / 2 ;
  } // while

  cout << "pass merge\n" ;

  // µ²§ô­pºâ®É¶¡
  sorted = myQ.front() ;
  myQ.pop() ;

  // µ²§ô­pºâ®É¶¡
  // end = time(NULL);
  end = clock() ;

  // ­pºâ¹ê»Úªá¶O®É¶¡
  runtime = difftime(end, start);
  WriteOutput( sorted, runtime, fileName + "_myOutput2" )  ;
  printf( "2.CPU runtime:%fms\n", runtime ) ;
  Cleaner::clear( sorted ) ;
  Cleaner::clear( myQ ) ;
  
  //------------------------------------------------------2 end
  /*//-----------------------------------------------------3 start
  sorted.clear() ;
  start = time(NULL);

  end = time(NULL);

  // ­pºâ¹ê»Úªá¶O®É¶¡
  runtime = difftime(end, start);
  WriteOutput( sorted, runtime, fileName + "_myOutput3" )  ;
  printf( "3.CPU runtime:%f\nms", runtime ) ;
  Cleaner.clear( sorted ) ;
  
  //-----------------------------------------------------3 end*/
  //-----------------------------------------------------4 start

  // start = time(NULL);
  start = clock() ;

  int i, j ;
  for ( i = 0 ; i < k_files.size() ; i++ ) {
    k_files[i] = BubbleSort( k_files[i], false ) ;
  } // for()
  
  sorted =  k_files[0] ;
  for ( int i = 1 ; i < k_files.size() ; i++ ) {
    sorted = Merge( sorted, k_files[i], false ) ;
  } // for()
  // µ²§ô­pºâ®É¶¡
  //end = time(NULL);
  end = clock() ;

  // ­pºâ¹ê»Úªá¶O®É¶¡
  runtime = difftime(end, start);
  WriteOutput( sorted, runtime, fileName + "_myOutput4" )  ;
  printf( "4.CPU runtime:%fms\n", runtime ) ;
  // ---------------------------------------------------4 end
  Cleaner::clear( origin ) ;
  Cleaner::clear( sorted ) ;
  Cleaner::clear( k_files ) ;
  Cleaner::clear( threads ) ;
  Cleaner::clear( myQ ) ;
  system( "pause\n" ) ;
  } // while
} // main()

void ReadInput( vector<int> &arr, string &fileName ) { 
  fstream infile ;
  int buf ;
  cout << "½Ð¿é¤JÀÉ®×¦WºÙ\n" ;
  cin >>  fileName ;
  infile.open( ( "\input\\" + fileName + ".txt" ).c_str(), fstream::in )  ;
  while( !infile.is_open() ) {
	cout << "ÀÉ®×¦WºÙ¿ù»~,­«·s¿é¤J¡G" ;
    cin >> fileName;
    infile.open( ( "\input\\" + fileName + ".txt" ).c_str(), fstream::in ) ;
  } //while

  while( infile >> buf ) {
    arr.push_back( buf ) ;
  } // while 
  infile.close() ;
} // readInput()

void WriteOutput( vector<int> arr, double  runTime, string fileName ) {
  time_t now = time(0);
  tm *ltm = localtime(&now);
  fstream outfile ;
  outfile.open( ( fileName + ".txt").c_str(), fstream::out ) ;
  outfile << "Sort¡G\n" ;
  for ( int i = 0 ; i < arr.size() ; i++ ) {
    outfile << arr[i] << endl ; 
  } // for

  outfile << "CPU Time¡G" << runTime << "ms" << endl ;
  outfile << "Output Time¡G" << 
 
  // ¿é¥X tm µ²ºcªº¦U­Ó²Õ¦¨³¡¤À
  outfile << 1900 + ltm->tm_year ;
  outfile << "-"<< 1 + ltm->tm_mon ;
  outfile << "-"<<  ltm->tm_mday ;
  outfile << " "<< ltm->tm_hour << ":";
  outfile << ltm->tm_min << ":";
  outfile << ltm->tm_sec << endl;
  outfile.close() ;
} // writeOutput()

vector<int> BubbleSort( vector<int> arr, bool isThread ) {
  for ( int i = 0 ; i < arr.size() ; i++ ) {
    for ( int j = arr.size()-1 ; j > i ; j-- ) {
      if ( arr[j-1] > arr[j] ) {
        arr[j] = arr[j] + arr[j-1] ; // a=j-1, b=j, a+b
        arr[j-1] = arr[j] - arr[j-1] ; // a+b-a = b
        arr[j] = arr[j] - arr[j-1] ; // a+b-b = a
	  } // if
	} // for

    //cout << i << endl ;
  } // for

  if ( isThread ) {
    myQ.push( arr ) ;
  } // if
  return arr ;
} // BubbleSort()

vector<int> Merge( vector<int> leftSub, vector<int> rightSub, bool isThread ) {
  int leftSize = leftSub.size(), rightSize = rightSub.size() ; 
  int leftIdx = 0, rightIdx = 0, arrSize = leftSize + rightSize ;
  vector<int> arr;
  arr.resize( arrSize ) ;

  for ( int i = 0 ; i < arrSize ; i++ ) {
	if ( rightIdx >= rightSize ) { // x/0 => sorted
	  arr[i] = leftSub[leftIdx] ;
	  leftIdx++ ;
	} // else if

    else if ( leftIdx >= leftSize ) { // x/? => sorted
      arr[i] = rightSub[rightIdx] ;
      rightIdx++ ;
	} // if
	
	else {
	  if ( leftSub[leftIdx] <= rightSub[rightIdx] ) {
	    arr[i] = leftSub[leftIdx] ;
	    leftIdx++ ;
	  } // if
	  
      else {
        arr[i] = rightSub[rightIdx] ;
        rightIdx++ ;
	  } // else
	} // else
  } // for

  if ( isThread ) {
    myQ.push( arr ) ;
  } // if 

  return arr ;
} // Merge()

vector< vector<int> > CutFiles( vector<int> originData, int numOfFiles ) {
  vector< vector<int> > k_files ;
  k_files.resize( numOfFiles ) ;
  int numOfIntInFile = originData.size() / numOfFiles ;
  int numOfPlusOneInt = originData.size() - ( numOfIntInFile * numOfFiles ) ;  // ¨ú¾l¼Æ 
  vector<int>::iterator it = originData.begin() ;
  for ( int i = 0 ; i < numOfFiles ; i++ ) {
    if ( i < numOfPlusOneInt ) {
      k_files[i].assign( it, it + numOfIntInFile + 1 )  ;
      it = it + numOfIntInFile + 1 ;
	} //  if
	 
	else  {
	  k_files[i].assign( it, it + numOfIntInFile ) ;
      it = it + numOfIntInFile ;
	} //  else
  }  // for
  
  return k_files ;
} // CutFiles()


